package Benchmark::Linear;

use 5.010;
use Moo;
our $VERSION = 0.0105;

=head1 NAME

Benchmark::Linear - Parametric Big-O(n) performance measurement.

=head1 DESCRIPTION

=head1 SYNOPSIS

=head1 EXPORTABLE FUNCTIONS

Nothing is exported by default.

=cut

use Time::HiRes qw(time);
use Carp;
use Exporter qw(import);
our @EXPORT_OK = qw(bench bench_all);

use Benchmark::Linear::Approx;

my @CLONEABLE = qw( min_arg max_arg max_time repeat init cleanup code );

my $nocode = sub { };
has init      => is => 'ro', default => sub { $nocode };
has code      => is => 'ro';
has cleanup   => is => 'ro', default => sub { $nocode };
has min_arg   => is => 'ro', default => sub { 1 };
has max_arg   => is => 'ro', default => sub { 1_000_000 };
has max_time  => is => 'ro';
has repeat    => is => 'ro', default => sub { 5 };
has elapsed   => is => 'ro', default => sub { 0 };
has stat      => is => 'ro', default => sub { {} }, reader => 'get_stat';

has inference_class => is => 'ro',
    default => sub { "Benchmark::Linear::Approx" };

=head2 bench { CODE; } %options;

Run a code snippet and return a L<Benchmark::Linear> object for querying.
The parameter is passed as both C<$_> and the I<second> argument.

Options may include:

=over

=item * min_count, max_count - limits for the parameter;

=item * max_time - runtime limit. Note that this I<only> affects the
code being tested, but not support functions.

=item * repeat - run each sample multiple times to achieve more precise
measurements. Default is 5, use 1 if you want a really fast benchmark.

=item * init( $n ) - coderef to be executed before the main routine.
It's return value will be the CODE's first argument.

=item * cleanup( $env, $n ) - coderef to be executed after the main routine

=back

=cut

sub bench(&@) { ## no critic
    my ($code, %opt) = @_;

    $opt{code} = $code;
    $opt{max_time} ||= 1;

    croak( "Useless use of bench{ ... } in void context" )
        unless defined wantarray;

    # TODO filter options
    my $bl = __PACKAGE__->new( %opt );
    $bl->run( %opt );

    return $bl;
};

=head2 bench_all \%common_options, \%code_snippets

Measure performance of multiple functions.
Options are the same as above.

Returns a L<Benchmark::Linear::Compare> object containing
all the statistics obtained.
If stringified, it will return a cross-comparison table
similar to what L<Benchmark> outputs.

=cut

sub bench_all($;$) { ## no critic
    my $fun = pop;
    my $opt = shift || {};

    require Benchmark::Linear::Compare;
    my $blc = Benchmark::Linear::Compare->new(
        max_time => 1, %$opt, todo => $fun );
    $blc->run;
    return $blc;
};

=head1 OBJECT-ORIENTED INTERFACE

=head2 new( %options )

=head2 clone( %overrides )

Returns a new L<Benchmark::Linear> object based on options and/or existing
object.

Options are the same as that of C<bench>, plus

=over

=item * code - the parametric subroutine to be tested

=back

A cloned object will not contain statistics.

=cut

sub clone {
    my ($self, %opt) = @_;

    $opt{$_} //= $self->$_ for @CLONEABLE;
    return (ref $self)->new( %opt );
};

=head2 run( %options )

Run given code with different parameter values, record timing.

Options are the same as that of C<bench>, plus

=over

=item * count => [ nnn, ... ] - parameter values to be measured.
These will be autogenerated if omitted.

=item * code - the parametric subroutine to be tested

=back

C<code> MUST be specified during either C<new>/C<clone>, or C<run> call.

Returns self, or a clone of self if code was given/overridden.

=cut

sub run {
    my ($self, %opt) = @_;

    # TODO infer count from min, max
    $opt{count}    ||= $self->default_count;
    $opt{max_time} ||= $self->max_time;
    $opt{repeat}   ||= $self->repeat;

    $self->_croak( "count=[...] is required" )
        unless ref $opt{count} eq 'ARRAY';

    # If external code supplied, make a clean obj for new stat
    $self = $self->clone( code => $opt{code} )
        if ($opt{code});

    $self->_croak("code is required in either new() or run()")
        unless $self->code;

    # TODO run auto!
    my $elapsed = 0;
    foreach my $n ( @{ $opt{count} } ) {
        my @stat = $self->_run_point( $n, $opt{repeat} );
        $self->{stat}{$n} = \@stat;
        $elapsed += $stat[0] * $stat[2];
        last if $opt{max_time} and $elapsed > $opt{max_time};
    };
    $self->{elapsed} += $elapsed;

    return $self;
};

sub _run_point {
    my ($self, $n, $repeat) = @_;

    $repeat ||= $self->repeat;

    # run the code
    my ($s, $s2);
    my $code = $self->code;
    for my $i ( 1 .. $repeat ) {
        local $_ = $n;
        my $env = $self->init->($n);
        my $t0 = time;
        $code->($n, $env);
        my $t = time - $t0;
        $s  += $t;
        $s2 += $t*$t;
        $self->cleanup->($n, $env);
    };

    # preprocess stats
    my $average = $s / $repeat;
    my $sigma   = $s2/$repeat - $average*$average;
    $sigma = $sigma <= 0 ? 0 : sqrt($sigma);

    # TODO or just [] and let user choose?
    return wantarray ? ($average, $sigma, $repeat) : $average;
};

=head2 get_approx

Infer performance as A*n+B linear function. See L<Benchmark::Linear::Approx>.

B<EXPERIMENTAL> Name is subject to change.

=cut

sub get_approx {
    my $self = shift;
    my $data = shift || $self->get_stat;

    # TODO Add weight based on dispersion
    my @work = map { [ $_ => $data->{$_}[0] ] } keys %$data;

    return $self->inference_class->infer( \@work );
};

=head2 ops_per_sec

Calculate execution speed as operations per second.

The precise definition is
I<change in parameter that would cause run time increase by 1 second>.

=cut

sub ops_per_sec {
    my $self = shift;
    return 1 / $self->get_approx->linear;
};

=head2 default_count

Calculate a set of measurement points between C<min_arg> and C<max_arg>.
The values grow roughly as 1.5 ** i.

Returns array of integer numbers.

=cut

sub default_count {
    my $self = shift;

    my $n = $self->min_arg;
    my @ret;
    while ($n <= $self->max_arg) {
        push @ret, $n;
        $n = int (($n * 3 + 1)/2);
    };

    return \@ret;
};

sub _croak {
    my ($self, $msg) = @_;

    my @stack = caller(1);
    my $fun = $stack[3];
    $fun =~ s/^.*:://;

    Carp::croak( (ref $self || $self)."->$fun(): $msg" );
};

=head1 AUTHOR

Konstantin S. Uvarin, C<< <khedin at gmail.com> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-benchmark-linear at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Benchmark-Linear>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Benchmark::Linear


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker (report bugs here)

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Benchmark-Linear>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Benchmark-Linear>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Benchmark-Linear>

=item * Search CPAN

L<http://search.cpan.org/dist/Benchmark-Linear/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 LICENSE AND COPYRIGHT

Copyright 2017 Konstantin S. Uvarin.

This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:

L<http://www.perlfoundation.org/artistic_license_2_0>

Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.

If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.

This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.

This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.

Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


=cut

1; # End of Benchmark::Linear
